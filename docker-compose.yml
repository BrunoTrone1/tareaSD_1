services:
  mongo:  # Base de datos principal (MongoDB)
    image: mongo:latest
    container_name: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - mongo_data:/data/db

  mongo-express:  # Interfaz web para MongoDB
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_URL: "mongodb://admin:admin@mongo:27017/?authSource=admin"
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      - mongo

  redis:  # Sistema de cache Redis
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --maxmemory 3mb --maxmemory-policy allkeys-lfu

  redis-commander:  # Interfaz web para Redis
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: always
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8082:8081"
    depends_on:
      - redis

  scraper:  # Servicio que descarga datos desde la API de Waze
    build:
      context: .
    container_name: scraper
    restart: on-failure
    environment:
      - MONGO_URI=mongodb://admin:admin@mongo:27017/?authSource=admin
      - MONGO_DB=waze_db
      - MONGO_COLLECTION=alerts
    command: ["python", "-m", "scraper.scraper"]
    depends_on:
      - mongo

  almacenamiento:  # Servicio que inserta alertas nuevas en MongoDB
    build:
      context: .
    container_name: almacenamiento
    volumes:
      - ./waze_alerts.json:/app/waze_alerts.json:ro
      - ./almacenamiento:/app/almacenamiento
    environment:
      - MONGO_URI=mongodb://admin:admin@mongo:27017/?authSource=admin
      - MONGO_DB=waze_db
      - MONGO_COLLECTION=alerts
      - JSON_FILE_PATH=almacenamiento/waze_alerts_test.json
      - CHECK_INTERVAL=10
    command: ["python", "almacenamiento/almacenamiento.py"]
    depends_on:
      - mongo

  generador_trafico:  # Genera trafico hacia Redis desde Mongo
    build:
      context: .
    container_name: generador_trafico
    restart: on-failure
    environment:
      - MONGO_URI=mongodb://admin:admin@mongo:27017/?authSource=admin
      - MONGO_DB=waze_db
      - MONGO_COLLECTION=alerts
      - DISTRIBUCION=poisson
      - LAMBDA=2
      - INTERVALO_UNIFORME=1
      - CACHE_POLICY=LFU
      - CACHE_CAPACITY=100
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    command: ["python", "-m", "generador_trafico.generador_trafico"]
    depends_on:
      - mongo
      - redis

  cache_api:  # API Cache que atiende peticiones para servir eventos cacheados
    build:
      context: .
    container_name: cache_api
    restart: on-failure
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
    ports:
      - "9090:9090"  # Cambia puerto si usas otro
    command: ["python", "cache/cache_api.py"]
    depends_on:
      - redis

  pig: # Servicio de procesamiento de datos con Apache Pig
    image: fluddeni/hadoop-pig
    container_name: pig
    stdin_open: true
    tty: true
    volumes:
      - ./data:/data
      - ./pig-hadoop:/pig-hadoop
    networks:
      - hadoopnet

  conversor: # Servicio que convierte datos de MongoDB a un formato limpio
    build:
      context: .
    container_name: conversor
    depends_on:
      - mongo
    volumes:
      - ./data:/data
    environment:
      - MONGO_URI=mongodb://admin:admin@mongo:27017/?authSource=admin
      - MONGO_DB=waze_db
      - MONGO_COLLECTION=alerts
      - OUTPUT_PATH=/data/eventos_limpios.tsv
    command: ["python", "utils/conversor.py"]

volumes: # Persistencia de datos
  mongo_data:
  hadoop_data:

networks: # Definici√≥n de red para servicios de Hadoop
  hadoopnet:
    driver: bridge

  
